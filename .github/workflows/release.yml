name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Extract changelog content
      id: extract_changelog
      run: |
        # Extract the latest version's changelog content
        VERSION="${{ github.ref_name }}"
        # Remove 'v' prefix if present
        VERSION_NUM="${VERSION#v}"
        
        # Find the section for this version and extract content until next version or end
        awk "/^## \[$VERSION_NUM\]/{flag=1; next} /^## \[/{if(flag) exit} flag" CHANGELOG.md > release_notes.md
        
        # If no specific version found, use a default message
        if [ ! -s release_notes.md ]; then
          echo "Release $VERSION" > release_notes.md
        fi
    
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        body_path: release_notes.md

    - name: Package Plugin for Release
      shell: bash
      run: |
        cd plugin/
        
        # Create bundle directory
        mkdir -p bundle/
        
        # Copy README.md to plugin directory
        cp ../README.md .
        
        # Copy yt_dlp_plugins to bundle
        cp -r yt_dlp_plugins bundle/
        
        # Enter bundle directory and clean Python cache files
        cd bundle/
        find . -type f -name '*.py[co]' -delete -o -type d -name __pycache__ -delete
        
        # Get project name from pyproject.toml
        PROJECT_NAME=$(python3 -c "
        import tomllib
        with open('../pyproject.toml', 'rb') as f:
            data = tomllib.load(f)
        print(data['project']['name'])
        ")
        
        # Create ZIP file
        zip -9 --recurse-paths "${PROJECT_NAME}.zip" *
        
        # Output file path for subsequent steps
        echo "PLUGIN_ZIP_PATH=plugin/bundle/${PROJECT_NAME}.zip" >> $GITHUB_ENV
        echo "PLUGIN_ZIP_NAME=${PROJECT_NAME}.zip" >> $GITHUB_ENV
        
        # Verify the ZIP file was created
        ls -la "${PROJECT_NAME}.zip"
        echo "Created plugin package: ${PROJECT_NAME}.zip"

    - name: Wait for Release Creation
      run: sleep 5

    - name: Upload Release Assets
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ env.PLUGIN_ZIP_PATH }}

  build:
    name: Build and Upload
    runs-on: ${{ matrix.os }}
    permissions:
      id-token: write
      contents: read
      attestations: write
    strategy:
      matrix:
        include:
        # Linux x86_64
        - os: ubuntu-latest
          target: x86_64-unknown-linux-gnu
          platform: linux-x86_64
        # Windows x86_64
        - os: windows-latest
          target: x86_64-pc-windows-msvc
          platform: windows-x86_64
        # macOS x86_64
        - os: macos-latest
          target: x86_64-apple-darwin
          platform: macos-x86_64
        # macOS ARM64
        - os: macos-latest
          target: aarch64-apple-darwin
          platform: macos-aarch64

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Build
      run: cargo build --release --target ${{ matrix.target }}

    - name: Package and Upload Assets
      shell: bash
      run: |
        # Define binary names based on OS
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          BIN="bgutil-pot.exe"
          ASSET="bgutil-pot-${{ matrix.platform }}.exe"
        else
          BIN="bgutil-pot"
          ASSET="bgutil-pot-${{ matrix.platform }}"
        fi
        
        # Copy and prepare binary
        cp target/${{ matrix.target }}/release/$BIN $ASSET
        if [[ "${{ matrix.os }}" != "windows-latest" ]]; then
          chmod +x $ASSET
        fi

    - name: Generate artifact attestation
      uses: actions/attest-build-provenance@v2
      with:
        subject-path: |
          bgutil-pot-${{ matrix.platform }}*

    - name: Upload Release Assets
      uses: softprops/action-gh-release@v2
      with:
        files: |
          bgutil-pot-${{ matrix.platform }}*

  publish-crates:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
